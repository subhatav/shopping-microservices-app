version: '3.9'

services:

  # Configuration of PostgreSQL (Database for Order Service)

  postgres-order:

    image: postgres:15.3-alpine
    container_name: postgres-order

    ports:
      - '5431:5431'
    expose:
      - '5431'

    command: -p 5431
    restart: unless-stopped

    environment:
      POSTGRES_DB: order-data
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      PGDATA: /data/postgres

    volumes:
      - ./postgres-order:/data/postgres

  # Configuration of PostgreSQL (Database for Inventory Service)

  postgres-inventory:

    image: postgres:15.3-alpine
    container_name: postgres-inventory

    ports:
      - '5432:5432'

    restart: unless-stopped

    environment:
      POSTGRES_DB: inventory-data
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      PGDATA: /data/postgres

    volumes:
      - ./postgres-inventory:/data/postgres

  # Configuration of MongoDB (Database for Product Service)

  mongo-product:

    image: mongo:5.0.18-focal
    container_name: mongo-product

    ports:
      - '27017:27017'
    expose:
      - '27017'

    restart: unless-stopped

    volumes:
      - ./mongo-product:/data/db

  # Configuration of MySQL (Database for Keycloak Authorization)

  mysql-keycloak:

    image: mysql:8-oracle
    container_name: mysql-keycloak

    restart: unless-stopped

    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak-data
      MYSQL_USER: user
      MYSQL_PASSWORD: pass

    volumes:
      - ./mysql-keycloak:/var/lib/mysql

  # Configuration of Zookeeper (Messaging Queue with Kafka)

  kafka-zookeeper:

    image: confluentinc/cp-zookeeper:7.4.0
    container_name: kafka-zookeeper

    environment:
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_CLIENT_PORT: 2181

  # Configuration of Broker (Messaging Queue with Kafka)

  kafka-broker:

    depends_on:
      - kafka-zookeeper

    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-broker

    ports:
      - '9092:9092'

    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: 'kafka-zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka-broker:29092

  # Configuration for Zipkin (Distributed Tracing with Micrometer)

  tracing-zipkin:

    image: openzipkin/zipkin
    container_name: tracing-zipkin

    ports:
      - '9411:9411'

  # Configuration for Keycloak Server (Authorization of Application)

  keycloak-auth:

    depends_on:
      - mysql-keycloak

    container_name: keycloak-auth
    image: quay.io/keycloak/keycloak:21.1

    ports:
      - '8181:8181'

    command: [ "start-dev", "--import-realm" ]

    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql-keycloak
      DB_DATABASE: keycloak-data
      DB_USER: user
      DB_PASSWORD: pass
      KC_HTTP_PORT: 8181
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: pass

    volumes:
      - ./realm-export.json:/opt/keycloak/data/import/realm.json

  # Compose Configuration for Discovery Server module

  discovery-server:

    depends_on:
      - tracing-zipkin

    image: subhatav/shopping-discovery-server:latest
    container_name: discovery-server

    ports:
      - '8761:8761'

    environment:
      - SPRING_PROFILES_ACTIVE=docker

  # Compose Configuration for API Gateway module

  api-gateway:

    depends_on:
      - tracing-zipkin
      - discovery-server
      - keycloak-auth

    image: subhatav/shopping-api-gateway:latest
    container_name: api-gateway

    ports:
      - '8080:8080'
    expose:
      - '8080'

    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=TRACE

  # Compose Configuration for Product Service module

  product-service:

    depends_on:
      - mongo-product
      - tracing-zipkin
      - discovery-server
      - api-gateway

    image: subhatav/shopping-product-service:latest
    container_name: product-service

    environment:
      - SPRING_PROFILES_ACTIVE=docker

  # Compose Configuration for Order Service module

  order-service:

    depends_on:
      - postgres-order
      - kafka-broker
      - tracing-zipkin
      - discovery-server
      - api-gateway

    image: subhatav/shopping-order-service:latest
    container_name: order-service

    environment:
      - SPRING_PROFILES_ACTIVE=docker

  # Compose Configuration for Inventory Service module

  inventory-service:

    depends_on:
      - postgres-inventory
      - tracing-zipkin
      - discovery-server
      - api-gateway

    image: subhatav/shopping-inventory-service:latest
    container_name: inventory-service

    environment:
      - SPRING_PROFILES_ACTIVE=docker

  # Compose Configuration for Notification Service module

  notification-service:

    depends_on:
      - kafka-broker
      - tracing-zipkin
      - discovery-server
      - api-gateway

    image: subhatav/shopping-notification-service:latest
    container_name: notification-service

    environment:
      - SPRING_PROFILES_ACTIVE=docker
